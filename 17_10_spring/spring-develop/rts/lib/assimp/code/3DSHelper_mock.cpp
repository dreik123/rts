// TODO: Substitue C3DSHelper with your actual class name
Assimp::D3DS::Discreet3DS::Chunk C3DSHelper::PACK_STRUCT(){}
enum $unnamed1$ C3DSHelper::shadetype3ds(){}
ai_real C3DSHelper::mTextureBlend(){}
std::string C3DSHelper::mMapName(){}
ai_real C3DSHelper::mOffsetU(){}
ai_real C3DSHelper::mOffsetV(){}
ai_real C3DSHelper::mScaleU(){}
ai_real C3DSHelper::mScaleV(){}
ai_real C3DSHelper::mRotation(){}
aiTextureMapMode C3DSHelper::mMapMode(){}
bool C3DSHelper::bPrivate(){}
int C3DSHelper::iUVSrc(){}
std::string C3DSHelper::mName(){}
aiColor3D C3DSHelper::mDiffuse(){}
ai_real C3DSHelper::mSpecularExponent(){}
ai_real C3DSHelper::mShininessStrength(){}
aiColor3D C3DSHelper::mSpecular(){}
aiColor3D C3DSHelper::mAmbient(){}
Assimp::D3DS::Discreet3DS::shadetype3ds C3DSHelper::mShading(){}
ai_real C3DSHelper::mTransparency(){}
Assimp::D3DS::Texture C3DSHelper::sTexDiffuse(){}
Assimp::D3DS::Texture C3DSHelper::sTexOpacity(){}
Assimp::D3DS::Texture C3DSHelper::sTexSpecular(){}
Assimp::D3DS::Texture C3DSHelper::sTexReflective(){}
Assimp::D3DS::Texture C3DSHelper::sTexBump(){}
Assimp::D3DS::Texture C3DSHelper::sTexEmissive(){}
Assimp::D3DS::Texture C3DSHelper::sTexShininess(){}
ai_real C3DSHelper::mBumpHeight(){}
aiColor3D C3DSHelper::mEmissive(){}
Assimp::D3DS::Texture C3DSHelper::sTexAmbient(){}
bool C3DSHelper::mTwoSided(){}
std::string C3DSHelper::mName(){}
std::vector<(aiVector3D)> C3DSHelper::mTexCoords(){}
std::vector<(unsigned int)> C3DSHelper::mFaceMaterials(){}
aiMatrix4x4 C3DSHelper::mMat(){}
float C3DSHelper::mTime(){}
ai_real C3DSHelper::mValue(){}
Assimp::D3DS::Node C3DSHelper::mParent(){}
std::vector<(p.Assimp::D3DS::Node)> C3DSHelper::mChildren(){}
std::string C3DSHelper::mName(){}
int32_t C3DSHelper::mInstanceNumber(){}
std::string C3DSHelper::mDummyName(){}
int16_t C3DSHelper::mHierarchyPos(){}
int16_t C3DSHelper::mHierarchyIndex(){}
std::vector<(aiQuatKey)> C3DSHelper::aRotationKeys(){}
std::vector<(aiVectorKey)> C3DSHelper::aPositionKeys(){}
std::vector<(aiVectorKey)> C3DSHelper::aScalingKeys(){}
std::vector<(aiVectorKey)> C3DSHelper::aTargetPositionKeys(){}
std::vector<(Assimp::D3DS::aiFloatKey)> C3DSHelper::aCameraRollKeys(){}
aiVector3D C3DSHelper::vPivot(){}
int32_t C3DSHelper::mInstanceCount(){}
std::vector<(Assimp::D3DS::Material)> C3DSHelper::mMaterials(){}
std::vector<(Assimp::D3DS::Mesh)> C3DSHelper::mMeshes(){}
std::vector<(p.aiCamera)> C3DSHelper::mCameras(){}
std::vector<(p.aiLight)> C3DSHelper::mLights(){}
